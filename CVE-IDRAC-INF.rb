#CVE-2021-36346 Poc Exploit

# All Right Reserved To Krd-Pentester

# Modules Req

require 'nokogiri'
require 'getopt/long'
require 'fileutils'
require 'json'
require 'selenium'
require 'open-uri'
require 'redfish_client'
require 'getopt/std'
require 'getopt/long'

def install_gem(load_name, install_name)
  puts "Information:\tInstalling #{install_name}"
  %x[gem install #{install_name}]
  Gem.clear_paths
  require "#{load_name}"
end



gem_list = [ "rubygems", "nokogiri", "open-uri",
  "getopt/std", "fileutils", "json",
  "selenium-webdriver", "mechanize",
  "getopt/long", "redfish_client" ]


#Loading

gem_list.each do |load_name|
  case load_name
  when "getopt/long"
    install_name = "getopt"
  else
    install_name = load_name
  end
  begin
    require "#{load_name}"
  rescue LoadError
    install_gem(load_name, install_name)
  end
end

def_dir = Dir.pwd+"/firmware"
options = {}
results = {}


# Ver INF


def get_version_string(string)
  strings = string.split(/ /)
  strings.each do |test|
    if test.match(/[0-9]/) and test.match(/\./)
      vers = test
      if test.match(/\,/)
        info = test.split(/\,/)
        info.each_with_index do |cell,index|
          if cell.match(/[0-9]/)
            if cell.match(/\./) or info[index-1].match(/version|revision/)
              vers = cell
            end
          end
        end
      end
      if vers.match(/^[0-9]|v/)
        vers = vers.gsub(/^v/,"")
        vers = vers.gsub(/^\.|\.$/,"")
        return vers
      end
    end
  end
  return string
end


#IDRAC Enumeration



def get_idrac_info(options)
  url  = "https://"+options['idrac']
  case options['get'].downcase
  when /memory/
    root = RedfishClient.new(url, prefix: "/redfish/v1/Systems", verify: false)
    data = root
  else
    root = RedfishClient.new(url, prefix: "/redfish/v1", verify: false)
    data = root
  end
  root.login(options['username'],options['password'])
  json = JSON.parse(root.to_s)
  case options['get'].downcase
  when /tag/
    value = json["Oem"]["Dell"]["ServiceTag"]
  else
    value = json
  end
  root.logout
  pp value
  return
end




#SET IDRAC


def set_idrac_info(options)
  return
end


#GET list model

def get_model_list()
  top_url = "http://www.dell.com/support/troubleshooting/us/en/19/ProductSelector/Select/FamilySelection?CategoryPath=all-products%2Fesuprt_ser_stor_net%2Fesuprt_"+options['hwtype']+"&Family="+options['hwupcase']+"&DisplayCrumbs=Product%2BType%40%2CServers%252c%2BStorage%2Band%2BNetworking%40%2C"+options['hwupcase']+"&rquery=na&sokey=solink"
  models = []
  doc = Nokogiti::HTML(open(top_url))
  doc.css("a_uif_link").each do |node|
    options['model'] = node[:id]
    if options['model'].match(/poweredge/)
      options['model'] = options['model'].split("-")[1]
      models.push(options['mofrl'])
    end
  end
  return models
end

#GET DOC URL



def print_document_urls(options)
  if options['model']
    if options['model'].downcase.match(/[m,r][0-9]1[0-9]/)
      base_owners_url = "https://downloads.dell.com/manuals/all-products/esuprt_ser_stor_net/esuprt_"+options['hwtype']+"/"+options['hwtype']+"-"
      base_setup_url  = "https://downloads.dell.com/manuals/all-products/esuprt_ser_stor_net/esuprt_"+options['hwtype']+"/"+options['hwtype']+"-"
    else
      base_owners_url = "https://dl.dell.com/topicspdf/"+options['hwtype']+"-"
      base_setup_url  = "https://downloads.dell.com/manuals/all-products/esuprt_ser_stor_net/esuprt_"+options['hwtype']+"/"+options['hwtype']+"-"
    end
  else
    base_owners_url = "https://dl.dell.com/topicspdf/"+options['hwtype']+"-"
    base_setup_url  = "https://downloads.dell.com/manuals/all-products/esuprt_ser_stor_net/esuprt_"+options['hwtype']+"/"+options['hwtype']+"-"
  end
  if options['model'].downcase.match(/[m,r][0-9]1[0-9]/)
    if options['model'].match(/r610/)
      owners_url = base_owners_url+options['model']+"_owner%%27s%%20manual2_en-us.pdf"
    else
      owners_url = base_owners_url+options['model']+"_owner%%27s%%20manual_en-us.pdf"
    end
  else
    owners_url = base_owners_url+options['model']+"_owners-manual_en-us.pdf"
  end
  setup_url = base_setup_url+options['model']+"_setup%%20guide_en-us.pdf"
  model_dir = options['fwdir']+"/"+options['model']
  if !File.directory?(model_dir) and options['download'] == true
    Dir.mkdir(model_dir)
  end
  puts options['hwupcase']+" "+options['model'].upcase+":"
  puts owners_url
  puts setup_url
  if options['download'] == true
    [ owners_url, setup_url ].each do |url|
      file = File.basename(url)
      file = options['fwdir']+"/"+file
      if !File.exist?(file)
        puts "Downloading "+url+" to "+file
        %x[wget "#{url}" -O #{file}]
      end
      if file.match(/owner/)
        if !File.size?(file)
          options['hwtype'] = options['hwupcase'].downcase
          url = "http://topics-cdn.dell.com/pdf/"+options['hwtype']+"-"+options['model']+"_Owner's%20Manual_en-us.pdf"
          puts "Downloading "+url+" to "+file
          %x[wget "#{url}" -O #{file}]
        end
      end
    end
  end
  puts
  return
end


def print_help(options)
  switches     = []
  long_switch  = ""
  short_switch = ""
  help_info    = ""
  handle_output(options,"")
  handle_output(options,"Usage: #{options['script']}")
  handle_output(options,"")
  option_list = get_valid_options()
  option_list.each do |line|
    if not line.match(/file_array/)
      help_info    = line.split(/# /)[1]
      switches     = line.split(/,/)
      long_switch  = switches[0].gsub(/\[/,"").gsub(/\s+/,"")
      short_switch = switches[1].gsub(/\s+/,"")
      if short_switch.match(/REQ|BOOL/)
        short_switch = ""
      end
      if long_switch.gsub(/\s+/,"").length < 7
        handle_output(options,"#{long_switch},\t\t\t#{short_switch}\t#{help_info}")
      else
        if long_switch.gsub(/\s+/,"").length < 15
          handle_output(options,"#{long_switch},\t\t#{short_switch}\t#{help_info}")
        else
          handle_output(options,"#{long_switch},\t#{short_switch}\t#{help_info}")
        end
      end
    end
  end
  handle_output(options,"")
  return
end

# Get command line options


def print_help(options)
  switches     = []
  long_switch  = ""
  short_switch = ""
  help_info    = ""
  handle_output(options,"")
  handle_output(options,"Usage: #{options['script']}")
  handle_output(options,"")
  option_list = get_valid_options()
  option_list.each do |line|
    if not line.match(/file_array/)
      help_info    = line.split(/# /)[1]
      switches     = line.split(/,/)
      long_switch  = switches[0].gsub(/\[/,"").gsub(/\s+/,"")
      short_switch = switches[1].gsub(/\s+/,"")
      if short_switch.match(/REQ|BOOL/)
        short_switch = ""
      end
      if long_switch.gsub(/\s+/,"").length < 7
        handle_output(options,"#{long_switch},\t\t\t#{short_switch}\t#{help_info}")
      else
        if long_switch.gsub(/\s+/,"").length < 15
          handle_output(options,"#{long_switch},\t\t#{short_switch}\t#{help_info}")
        else
          handle_output(options,"#{long_switch},\t#{short_switch}\t#{help_info}")
        end
      end
    end
  end
  handle_output(options,"")
  return
end

# Get command line options

include Getopt

begin
  options = Long.getopts(
    ['--model', REQUIRED],      # Model e.g. M610, R720, etc
    ['--platform', REQUIRED],   # Platform e.g. PowerEdge, PowerVault, etc (defaults to PowerEdge)
    ['--type', REQUIRED],       # Type e.g. BIOS (defaults to listing all)
    ['--idrac', REQUIRED],      # iDRAC address (used for redfish)
    ['--search', REQUIRED],     # Search for a term
    ['--username', REQUIRED],   # Username (used with iDRAC functions)
    ['--password', REQUIRED],   # Password (used with iDRAC functions)
    ['--fwdir', REQUIRED],      # Set a directory to download to
    ['--output', REQUIRED],     # Output type, e.g. Text, HTML (defaults to Text)
    ['--version', BOOLEAN],     # Print version information
    ['--help', BOOLEAN],        # Print help information
    ['--get', REQUIRED],        # Get iDRAC parameter
    ['--set', REQUIRED],        # Set iDRAC parameter
    ['--download', BOOLEAN],    # Download file
    ['--all', BOOLEAN]          # Return all versions (by default only latest are returned)
  )

rescue
  options['output'] = "text"
  print_help(options)
  exit
end



if !options['username']
  options['username'] = "root"
end


if !options['password']
  options['username'] = "toor"
end


if !options['output']
  options['output'] = "text"
end

if !options==['fwdir']
  options['fwdir'] = def_dir
end



if !options['platform']
  options['hwtype']   = "poweredge"
  options['hwupcase'] = "PowerEdge"
else
  options['hwtype'] = options['platform'].downcase
  case options['hwtype']
  when /vault/
    options['hwupcase'] = "PowerVault"
  when /compellent/
    options['hwupcase'] = options['hwtype'].capitalize
  else
    options['hwupcase'] = "PowerEdge"
  end
end

if options['version'] == true
  print_version()
end

if !options['type']
  options['type'] = "list"
end

# Handle download switch and create download directory

if options['download'] == true
  if !File.directory?(options['fwdir'])
    Dir.mkdir(options['fwdir'])
  end
  if options['model']
    model_dir = options['fwdir']+"/"+options['model']
    if !File.directory?(model_dir)
      Dir.mkdir(model_dir)
    end
  end
end

# Handle type switch

if options['type'].to_s.match(/manual|pdf/)
  puts
  if options['model'].match(/all/)
    models = get_model_list()
    models.each do |model_name|
      options['model'] = model_name
      print_document_urls(options)
    end
  else
    print_document_urls(options)
  end
  exit
end

# Handle iDRAC switch

if options['idrac']
  if options['get']
    get_idrac_info(options)
  end
  if options['set']
    set_idrac_info(options)
  end
  exit
end

# Handle model switch


if options['model']
  if options['model'].match(/all/)
    models = get_model_list(l)
    models.each do |mode_name|
      options['model']    = model_name
      options['modelurl'] = "https://www.dell.com/support/home/en-au/product-support/product/"+options['hwtype']+"-"+options['model']+"/drivers"
      if options['type'] == "list"
        if options['model'].length < 5
          puts options['hwupcase']+" "+options['model'].upcase+":\t\t"+options['modelurl']
        else
          puts options['hwupcase']+" "+options['model'].upcase+":\t"+options['modelurl']
        end
      else
        results = get_firmware_info(options,results)
        print_results(options,results)
      end
    end
  else
    options['model']    = options['model'].downcase
    options['modelurl'] = "https://www.dell.com/support/home/en-au/product-support/product/"+options['hwtype']+"-"+options['model']+"/drivers"
    results = get_firmware_info(options,results)
    print_results(options,results)
  end
end
